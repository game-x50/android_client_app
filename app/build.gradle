import kotlin.Pair

apply from: rootProject.ext[GradleExtraArgs.baseAndroidApp]

apply from: rootProject.ext[GradleExtraArgs.dagger2Kapt]
apply from: rootProject.ext[GradleExtraArgs.androidAppViewBindingWithExtensions]
apply from: rootProject.ext[GradleExtraArgs.applicationLeakCanaryTool]

apply from: rootProject.ext[GradleExtraArgs.apkSigning]

apply from: rootProject.ext[GradleExtraArgs.projectPropertiesRead]

apply plugin: Plugins.crashlytics

private static String getPairStrings() {
    return "kotlin.Pair<String, String>"
}

private static String createBuildConfigPairString(final Pair<String, String> pair) {
    return "new ${getPairStrings()}(\"${pair.first}\", \"${pair.second}\")"
}

android {

    buildFeatures {
        buildConfig = true
    }

    defaultConfig {
        applicationId = "com.ruslan.hlushan.game"
        versionCode = 1
        versionName = "1.0"

        buildConfigField(
                getPairStrings(),
                "DEFAULT_LANGUAGE_FULL_CODE",
                createBuildConfigPairString(ApplicationConfigs.defaultLanguageNonFullCode)
        )
        buildConfigField(
                "java.util.List<" + getPairStrings() + ">",
                "AVAILABLE_LANGUAGES_FULL_CODES",
                "java.util.Arrays.asList("
                        + ApplicationConfigs.availableLanguagesFullCodes.collect { pair ->
                    createBuildConfigPairString(pair)
                }.join(",")
                        + ")"
        )

        buildConfigField("String", "BASE_API_URL", getProjectProperty("BASE_API_URL"))

        resConfigs(ApplicationConfigs.applicationLanguagesNonFullCodes)

        multiDexEnabled = true
    }

    buildTypes {
        debug {
            buildConfigField("String", "APP_TAG", "\"GAME_APP_DEBUG\"")
            buildConfigField("boolean", "IS_LOGCAT_ENABLED", "true")
            buildConfigField("boolean", "IS_CRASHLYTICS_ENABLED", "false")

            firebaseCrashlytics.mappingFileUploadEnabled = false

            versionNameSuffix = "-${BuildTypes.debug}"
            applicationIdSuffix = ".${BuildTypes.debug}"

            signingConfig = signingConfigs.debug
        }

        release {
            proguardFiles(getDefaultProguardFile(ApplicationConfigs.defaultProguardFile))
            proguardFiles(fileTree(rootProject.ext[GradleExtraArgs.proguardConfigsFolder]).asList().toArray())

            buildConfigField("String", "APP_TAG", "\"GAME_APP_RELEASE\"")
            buildConfigField("boolean", "IS_LOGCAT_ENABLED", "false")
            buildConfigField("boolean", "IS_CRASHLYTICS_ENABLED", "true")

            firebaseCrashlytics.mappingFileUploadEnabled = true

            signingConfig = signingConfigs.release
        }

        staging {
            initWith(buildTypes.release)

            versionNameSuffix = "-${BuildTypes.staging}"
            applicationIdSuffix = ".${BuildTypes.staging}"

            signingConfig = signingConfigs.debug
        }
    }

    lintOptions {
        //todo: try to avoid: issue is related to lint crash itself;
        // duplicated in ":features:core:ui:viewbinding:extensions"
        disable "NullSafeMutableLiveData"
    }

    resourcePrefix("game_app_")
}

dependencies {
    implementation(projects.features.core.extensions)
    implementation(projects.features.core.impl.lib)
    implementation(projects.features.thirdParty.androidx.insets)

    implementation(projects.features.core.parsing.impl)

    implementation(projects.features.core.logger.impl)

    implementation(projects.features.core.language.impl)

    implementation(projects.features.core.thread.lib)

    implementation(projects.features.core.ui.impl.lib)

    implementation(projects.features.core.ui.views)

    implementation(projects.features.core.ui.activity)
    implementation(projects.features.core.ui.fragment)

    runtimeOnly(projects.features.core.ui.layout.container)

    runtimeOnly(projects.features.core.ui.lifecycle.utils)

    implementation(projects.features.core.ui.dimens)
    implementation(projects.features.core.ui.colors)

    implementation(projects.features.core.ui.viewmodel.extensions)

    implementation(projects.features.core.command.lib)

    runtimeOnly(projects.features.core.ui.pagination.view)

    implementation(projects.features.core.network.impl.lib)

    implementation(projects.features.core.android.storage)

    implementation(projects.features.thirdParty.androidx.workManager.utils)

    implementation(projects.features.game.auth.impl)
    implementation(projects.features.game.storage.impl)
    implementation(projects.features.game.top.impl)

    implementation(projects.features.game.auth.ui)
    implementation(projects.features.game.play.ui.screens)
    implementation(projects.features.game.settings.ui)
    implementation(projects.features.game.top.ui)

    runtimeOnly(projects.features.thirdParty.threeTen.extensions)
    implementation(Deps.threeTenBpAndroid)

    implementation(Deps.androidxAppCompat)

    compileOnly(Deps.androidMaterial)
    runtimeOnly(projects.features.thirdParty.androidx.fragment.extensions)

    runtimeOnly(projects.features.thirdParty.androidx.material.extensions)

    implementation(Deps.androidxCoreKtx)
    implementation(projects.features.core.android.extensions)

    runtimeOnly(Deps.constraintLayout)

    implementation(Deps.edgeToEdgeDecorator)

    implementation(Deps.dagger2)

    implementation platform(Deps.firebaseBom)
    runtimeOnly(Deps.firebaseAnalytics)//todo because of firebaseAuth, crashlytics require
    implementation(Deps.firebaseCrashlytics)
}

apply plugin: Plugins.googleServices